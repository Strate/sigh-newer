{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;sBAAc,QAAQ;;;;wBACF,UAAU;;;;wBACH,WAAW;;kBACvB,IAAI;;;;oBACF,MAAM;;;;AAEvB,IAAM,SAAS,GAAG,sBAAQ,SAAS,CAAC,gBAAG,IAAI,CAAC,CAAA;;qBAE7B,UAAS,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE;AAChD,SAAO,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,eAAe;WAAI,gBAAM,WAAW,CAC3D,sBAAQ,MAAM,CACZ,eAAe,EACf,UAAA,KAAK,EAAI;AACP,UAAI,KAAK,CAAC,IAAI,KAAK,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;AACnD,eAAO,IAAI,CAAC;OACb;AACD,UAAI,cAAc,GAAG,kBAAK,IAAI,CAC5B,QAAQ,EACR,kBAAK,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EACxB,UAAU,GACN,kBAAK,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,GAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,UAAU,GAChE,kBAAK,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAC9B,CAAA;AACD,aAAO,sBAAQ,GAAG,CAAC,CACjB,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,EAC3B,SAAS,CAAC,cAAc,CAAC,CAC1B,CAAC,CAAC,IAAI,CAAC,UAAC,IAAwB;mCAAxB,IAAwB;;YAAvB,UAAU;YAAE,UAAU;eAC9B,UAAU,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC,OAAO,EAAE;OAAA,CACxD,SAAM,CAAC,UAAA,CAAC;eAAI,IAAI;OAAA,CAAC,CAAA;KACnB,CACF,CAAC,IAAI,CAAC,UAAA,MAAM,EAAI;AACf,yBAAI,MAAM,CAAC,MAAM,EAAE,2BAA2B,EAAE,eAAe,CAAC,MAAM,CAAC,CAAA;AACvE,aAAO,MAAM,CAAA;KACd,CAAC,CACH;GAAA,CAAC,CAAA;CACH","file":"src/index.js","sourcesContent":["import _ from 'lodash'\nimport Promise from 'bluebird'\nimport { Bacon, log } from 'sigh-core'\nimport fs from 'fs'\nimport path from 'path'\n\nconst statAsync = Promise.promisify(fs.stat)\n\nexport default function(op, basePath, targetType) {\n  return op.stream.flatMap(_originalEvents => Bacon.fromPromise(\n    Promise.filter(\n      _originalEvents,\n      event => {\n        if (event.type !== \"add\" && event.type !== \"change\") {\n          return true;\n        }\n        let targetFileName = path.join(\n          basePath,\n          path.dirname(event.path),\n          targetType\n            ? path.basename(event.path, '.'+event.fileType) + '.' + targetType\n            : path.basename(event.path)\n        )\n        return Promise.all([\n          statAsync(event.sourcePath),\n          statAsync(targetFileName)\n        ]).then(([sourceStat, targetStat]) =>\n          targetStat.mtime.getTime() < sourceStat.mtime.getTime()\n        ).catch(e => true)\n      }\n    ).then(events => {\n      log(events.length, \"files to process in found\", _originalEvents.length)\n      return events\n    })\n  ))\n}\n"]}